/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthIndexRouteImport } from './routes/auth/index'
import { Route as ProfileIdRouteImport } from './routes/profile.$id'
import { Route as LinkIdRouteImport } from './routes/link.$id'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthIndexRoute = AuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileIdRoute = ProfileIdRouteImport.update({
  id: '/profile/$id',
  path: '/profile/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const LinkIdRoute = LinkIdRouteImport.update({
  id: '/link/$id',
  path: '/link/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/link/$id': typeof LinkIdRoute
  '/profile/$id': typeof ProfileIdRoute
  '/auth': typeof AuthIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/link/$id': typeof LinkIdRoute
  '/profile/$id': typeof ProfileIdRoute
  '/auth': typeof AuthIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/link/$id': typeof LinkIdRoute
  '/profile/$id': typeof ProfileIdRoute
  '/auth/': typeof AuthIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/callback' | '/link/$id' | '/profile/$id' | '/auth'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/callback' | '/link/$id' | '/profile/$id' | '/auth'
  id:
    | '__root__'
    | '/'
    | '/auth/callback'
    | '/link/$id'
    | '/profile/$id'
    | '/auth/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
  LinkIdRoute: typeof LinkIdRoute
  ProfileIdRoute: typeof ProfileIdRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/': {
      id: '/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile/$id': {
      id: '/profile/$id'
      path: '/profile/$id'
      fullPath: '/profile/$id'
      preLoaderRoute: typeof ProfileIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/link/$id': {
      id: '/link/$id'
      path: '/link/$id'
      fullPath: '/link/$id'
      preLoaderRoute: typeof LinkIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthCallbackRoute: AuthCallbackRoute,
  LinkIdRoute: LinkIdRoute,
  ProfileIdRoute: ProfileIdRoute,
  AuthIndexRoute: AuthIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
